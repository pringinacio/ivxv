@startuml

!ifdef MONITORING
    !define COLLECTOR
    !define OWNER
!endif

!ifdef KEY_APPLICATION
    !define OWNER
    !define GENERIC_APP
!endif

!ifdef AUDIT_APPLICATION
    !define EXTERNAL_MODULES
    !define GENERIC_APP
!endif

!ifdef PROCESSING_APPLICATION
    !define GENERIC_APP
    !define EXTERNAL_MODULES
!endif

!ifdef APP_MODULES
    !define EXTERNAL_MODULES
    !define HELPER_MODULES
!endif

!ifdef COLLECTOR_MICROSERVICES
    !define COLLECTOR
    !define SERVICES
    !define VOTER
!endif

!ifdef COLLECTOR_EXTENSION
    !define COLLECTOR
    !define EXTENSION_MODULES
    !define EXTERNAL_INTERFACES
!endif


!include skin.inc

!ifdef GENERIC_APP
    interface "TR_APP_LOG()" <<TR_IVXV()>> as i_app_log
!endif

!ifdef PROCESSING_APPLICATION
    interface "TR_IVOTERS_PDF()" <<TR_UNSPECIFIED()>> as i_ivoters_pdf
    !define ENCRYPTED_VOTES
!endif



!ifdef KEY_APPLICATION
    interface "TR_KEY_SHARE()" <<TR_IVXV()>> as i_key_share
    interface "TR_INVALID_VOTES()" <<TR_IVXV()>> as i_invalid_votes
    interface "TR_CERTIFICATE()" <<TR_EXTERNAL()>> as i_certificate
    !define AUDITABLE
!endif


!ifdef AUDIT_APPLICATION
    interface "TR_MIXING_PROOF()" <<TR_UNSPECIFIED()>> as i_mixing_proof
    !define AUDITABLE
!endif


!ifdef AUDITABLE
    interface "TR_DECRYPTION_PROOF()" <<TR_IVXV()>> as i_decryption_proof
    interface "TR_VOTING_RESULT()" <<TR_EXTERNAL()>> as i_voting_result
    interface "TR_MIXED_VOTES()" <<TR_IVXV()>> as i_mixed_votes
    !define ENCRYPTED_VOTES
!endif


!ifdef ENCRYPTED_VOTES
    interface "TR_ENCRYPTED_VOTES()" <<TR_IVXV()>> as i_encrypted_votes
!endif

'interface "TR_CONF_BUNDLE()" <<TR_IVXV()>> as i_conf_bundle


/'
 '
 '  ACTORS
 '
 '/

!ifdef OWNER
    actor "TR_A_OWNER()" <<TR_NEC()>> as a_owner
!endif

!ifdef MONITORING
    actor "TR_A_HELPDESK()" <<TR_EXTERNAL()>> as a_helpdesk
    actor "TR_A_SYSADMIN()" <<TR_EXTERNAL()>> as a_sysadmin
!endif

!ifdef KEY_APPLICATION
    actor "TR_A_KEYMANAGER()" <<TR_NEC()>> as a_keymanager
    a_keymanager ..> i_key_share
!endif

!ifdef PROCESSING_APPLICATION
    actor "TR_A_OFFLINE_PROCESSOR()" <<TR_NEC()>> as a_offline_processor
!endif

!ifdef AUDIT_APPLICATION
    actor "TR_A_AUDITOR()" <<TR_EXTERNAL()>> as a_auditor
!endif

/'
 '
 '  EXTERNAL SERVICES
 '
 '/

!ifdef EXTERNAL_INTERFACES
interface "TR_SK_OCSP()" <<TR_EXTERNAL()>> as i_sk_ocsp
interface "TR_SK_AUTH()" <<TR_EXTERNAL()>> as i_sk_auth
interface "TR_RFC_3161()" <<TR_EXTERNAL()>> as i_rfc_3161
interface "TR_MID()" <<TR_EXTERNAL()>> as i_mid
!endif


!ifdef PROCESSING_APPLICATION
interface "TR_REGISTERED_VOTES()" <<TR_UNSPECIFIED()>> as i_registered_votes
!endif

!ifdef EXTERNAL_SERVICES
[TR_SK_OCSP()] <<TR_EXTERNAL()>> as sk_ocsp
sk_ocsp -up- i_sk_ocsp
sk_ocsp -down- i_registered_votes

[TR_RFC_3161()] <<TR_EXTERNAL()>> as rfc_3161
rfc_3161 -up- i_rfc_3161
rfc_3161 -down- i_registered_votes


[TR_DDOC_SERVICE()] <<TR_EXTERNAL()>> as ddoc_service
ddoc_service -up- i_mid

!endif

!ifdef MONITORING
[TR_ELECTION_WWW()] <<TR_NEC()>> as election_www
[TR_ZABBIX_EXT()] <<TR_EXTERNAL()>> as zabbix_ext
'[TR_MESSENTE()] <<TR_EXTERNAL()>> as messente
'interface "TR_MESSENTE()" <<TR_EXTERNAL()>> as i_messente

    interface "TR_MONITOR()" <<TR_EXTERNAL()>> as i_monitor
    interface "TR_HELPDESK()" <<TR_EXTERNAL()>> as i_helpdesk
'messente -up- i_messente

!endif






!ifdef PROCESSING_APPLICATION
interface "TR_VIS_VOTERS()" <<TR_EXTERNAL()>> as i_vis_voters
interface "TR_VIS_REVOKE()" <<TR_EXTERNAL()>> as i_vis_revoke
interface "TR_POP_VOTERS()" <<TR_EXTERNAL()>> as i_pop_voters
interface "TR_VIS_DIST()" <<TR_EXTERNAL()>> as i_vis_dist
!endif


'[TR_VIS()] <<TR_EXTERNAL()>> as vis
'interface "TR_VIS_RESULTS()" <<TR_EXTERNAL()>> as i_vis_results
'vis -up- i_vis_results
'interface "TR_VIS_CANDS()" <<TR_EXTERNAL()>> as i_vis_cands
'vis - i_vis_cands
'vis -up- i_vis_dist


!ifdef VIS
vis -up- i_vis_voters
vis -up- i_vis_revoke

[TR_POP()] <<TR_EXTERNAL()>> as pop
pop -up- i_pop_voters
!endif


!ifdef EXTERNAL_MODULES
[TR_JDIGIDOC()] <<TR_EXTERNAL()>> as jdigidoc
interface "TR_JAVA()" <<TR_EXTERNAL()>> as i_java
i_java -right- jdigidoc
!endif


!ifdef HELPER_MODULES
package "TR_P_HELPERS()" as p_helpers {

    interface "TR_ELEC()" <<TR_IVXV()>> as elec
    [TR_RK_ELEC()] <<TR_IVXV()>> as rk_elec
    [TR_RH_ELEC()] <<TR_IVXV()>> as rh_elec
    [TR_EP_ELEC()] <<TR_IVXV()>> as ep_elec
    [TR_KOV_ELEC()] <<TR_IVXV()>> as kov_elec

    rk_elec -up- elec
    rh_elec -up- elec
    ep_elec -up- elec
    kov_elec -up- elec
}
!endif




!ifdef PROCESSING_APPLICATION
interface "TR_EXPORT_VOTES()" <<TR_IVXV()>> as i_export_votes
!endif


!ifdef COLLECTOR

package "TR_P_COLLECTOR()" as p_collector {





!ifdef SUPPORT
        [TR_ADMIN_APP()] <<TR_IVXV()>> as admin_app
'        admin_app - i_export_votes
        interface "TR_LOCALADMIN()" <<TR_IVXV()>> as i_localadmin
        interface "TR_REMOTEADMIN()" <<TR_IVXV()>> as i_remoteadmin
        admin_app -up- i_localadmin
        admin_app -left- i_remoteadmin


        [TR_BACKUP()] <<TR_IVXV()>> as backup



       interface "TR_BACKUP()" <<TR_IVXV()>> as i_backup
       backup - i_backup
!endif

!ifdef MONITORING

    interface "TR_LOG_INT()" <<TR_IVXV()>> as i_log_int
    interface "TR_ZABBIX()" <<TR_IVXV()>> as i_zabbix

    rectangle "TR_R_MONITORING()" as r_monitoring {
        [TR_IVXV_MONITOR()] <<TR_EXTERNAL()>> as ivxv_monitor

        database "TR_MONITOR_DB()" as monitor_db {
            }

        interface "TR_LOG_EXT()" <<TR_IVXV()>> as i_log_ext
'        interface "TR_LOG_SMTP()" <<TR_IVXV()>> as i_log_smtp
'        interface "TR_LOG_SMS()" <<TR_IVXV()>> as i_log_sms
        ivxv_monitor -down- i_log_int
'        ivxv_monitor -down- i_log_smtp
'        ivxv_monitor -down- i_log_sms
        ivxv_monitor -up- i_log_ext
        ivxv_monitor -up- i_zabbix
        ivxv_monitor -left-> monitor_db

        zabbix_ext <-left- i_monitor
        zabbix_ext <-left- i_helpdesk
'        i_log_sms -> i_messente

    }

    a_helpdesk -down-> i_helpdesk
    a_owner -down-> i_monitor
    a_sysadmin -down-> i_monitor

    election_www --> i_log_ext
    zabbix_ext --> i_zabbix

!endif


!ifdef EXTENSION_MODULES

    interface "TR_API_INT()" <<TR_IVXV()>> as i_api_int

    rectangle "TR_R_MID_AUTH()" as r_mid_auth {
        [TR_MID_AUTH()] <<TR_IVXV()>> as mid_auth
        [TR_MID_SIGN()] <<TR_IVXV()>> as mid_sign

        interface "TR_MID()" <<TR_IVXV()>> as i_mid

        mid_auth -up- i_mid
        mid_sign -up- i_mid

        mid_auth -down-> i_mid
        mid_sign -down-> i_mid
    }

    rectangle "TR_R_EXTENSION()" as r_extension {
        [TR_TLS()] <<TR_IVXV()>> as tls
        [TR_TICKET()] <<TR_IVXV()>> as ticket
        [TR_BDOC()] <<TR_IVXV()>> as bdoc
        [TR_OCSP()] <<TR_IVXV()>> as ocsp
        [TR_TSP()] <<TR_IVXV()>> as tsp
        [TR_REG()] <<TR_IVXV()>> as reg

        interface "TR_AUTH()" <<TR_IVXV()>> as i_auth
        interface "TR_VERIFY()" <<TR_IVXV()>> as i_verify
        interface "TR_Q11N()" <<TR_IVXV()>> as i_q11n

        tls -up- i_auth
        ticket -up- i_auth
        bdoc -up- i_verify
        ocsp -up- i_q11n
        tsp -up- i_q11n
        reg -up- i_q11n

        tls -down-> i_sk_auth
        ocsp -down-> i_sk_ocsp
        tsp -down-> i_rfc_3161
        reg -down-> i_sk_ocsp
        reg -down-> i_rfc_3161
    }

    i_api_int -down-> i_mid
    i_api_int -down-> i_auth
    i_api_int -down-> i_verify
    i_api_int -down-> i_q11n
!endif

!ifdef SERVICES
    rectangle "TR_R_STORAGE()" as r_storage {
        [TR_STORAGE()] <<TR_IVXV()>> as storage

        database "TR_STORAGE_DB()" as storage_db {
            }

        database "TR_CONF_DB_STORAGE()" as conf_db_storage {
            }


        storage -> storage_db

        interface "TR_TLS_STORAGE()" <<TR_IVXV()>> as i_tls_storage
        i_tls_storage -- storage

    }



    rectangle "TR_R_CLS()" as r_cls {
        interface "TR_TLS_CLS()" <<TR_IVXV()>> as i_tls_cls
        [TR_CLS()] <<TR_IVXV()>> as cls

        database "TR_CONF_DB_CLS()" as conf_db_cls {
            }
        cls --> i_tls_storage

        cls -up- i_tls_cls
    }

    rectangle "TR_R_VERIFY()" as r_verify {
        interface "TR_TLS_VERIFY()" <<TR_IVXV()>> as i_tls_verify
        [TR_VERIFY()] <<TR_IVXV()>> as verify

        database "TR_CONF_DB_VERIFY()" as conf_db_verify {
            }
        verify --> i_tls_storage

        verify -up- i_tls_verify
    }

    rectangle "TR_R_VOTING()" as r_voting {
        interface "TR_TLS_VOTE()" <<TR_IVXV()>> as i_tls_vote
        [TR_VOTE()] <<TR_IVXV()>> as vote

        database "TR_CONF_DB_VOTE()" as conf_db_vote {
            }
        vote --> i_tls_storage

        vote -up- i_tls_vote
    }

    rectangle "TR_R_DISPATCH()" as r_dispatch {
        interface "TR_HTTPS_EXT()" <<TR_IVXV()>> as i_https_ext
        interface "TR_TLS_INT()" <<TR_IVXV()>> as i_tls_int
        [TR_FORWARDER()] <<TR_IVXV()>> as forwarder

        database "TR_CONF_DB_FORWARDER()" as conf_db_forwarder {
            }

        i_tls_int --> i_tls_cls
        i_tls_int --> i_tls_vote
        i_tls_int --> i_tls_verify

        forwarder -up- i_https_ext
        forwarder -down-> i_tls_int
    }

!endif

}

!endif


/'
 '
 ' VÕTMERAKENDUS
 '
 '/

!ifdef KEY_APPLICATION
package "TR_P_KEY()" as p_key {
    [TR_KEY_APP()] <<TR_IVXV()>> as key_app

    interface "TR_KEY_IN()" <<TR_IVXV()>> as i_key_in
    interface "TR_KEY_OUT()" <<TR_IVXV()>> as i_key_out
    interface "TR_PKCS15()" <<TR_IVXV()>> as i_pkcs15
    interface "TR_KEY_GUI()" <<TR_IVXV()>> as i_key_gui

    key_app -down-> i_pkcs15
    key_app -left-> i_key_in
    key_app -up-> i_key_out
    key_app -right-> i_key_gui


    i_pkcs15 -- i_key_share
    i_key_in ..> i_mixed_votes
    i_key_out .up.> i_voting_result
    i_key_out .up.> i_decryption_proof
    i_key_out .up.> i_app_log
    i_key_out .up.> i_certificate
    i_key_out .up.> i_invalid_votes
}

a_owner -> i_key_gui
!endif


/'
 '
 ' TÖÖTLEMISRAKENDUS
 '
 '/

!ifdef PROCESSING_APPLICATION
package "TR_P_PROCESSOR()" as p_processor {
    [TR_OFFLINE_PROCESSOR()] <<TR_IVXV()>> as offline_processor
    [TR_PDF_API()] <<TR_EXTERNAL()>> as pdf_api

    offline_processor -> pdf_api

    interface "TR_PROCESSOR_IN()" <<TR_IVXV()>> as i_processor_in
    interface "TR_PROCESSOR_OUT()" <<TR_IVXV()>> as i_processor_out
    interface "TR_PROCESSOR_GUI()" <<TR_IVXV()>> as i_processor_gui
    offline_processor -down-> i_processor_in
    offline_processor -left- i_processor_gui
    offline_processor -up-> i_processor_out
    offline_processor -right-> i_java

    i_processor_in ..> i_registered_votes
    i_processor_in ..> i_vis_revoke
    i_processor_in ..> i_vis_dist
    i_processor_in ..> i_pop_voters
    i_processor_in ..> i_export_votes

    i_processor_out .up.> i_vis_voters
    i_processor_out .up.> i_ivoters_pdf
    i_processor_out .up.> i_encrypted_votes
    i_processor_out .up.> i_app_log
}

a_offline_processor -> i_processor_gui
!endif

/'
 '
 ' AUDITIRAKENDUS
 '
 '/

!ifdef AUDIT_APPLICATION
package "TR_P_AUDIT()" as p_audit {
    [TR_OFFLINE_AUDIT()] <<TR_IVXV()>> as offline_audit
    [TR_DECRYPTION_VERIFIER()] <<TR_IVXV()>> as decryption_verifier
    interface "TR_MIXING_VERIFIER()" <<TR_IVXV()>> as i_mixing_verifier
    interface "TR_AUDIT_IN()" <<TR_IVXV()>> as i_audit_in
    interface "TR_AUDIT_OUT()" <<TR_IVXV()>> as i_audit_out
    interface "TR_AUDIT_GUI()" <<TR_IVXV()>> as i_audit_gui

    offline_audit --> decryption_verifier
    offline_audit --> i_mixing_verifier

    offline_audit -down-> i_audit_in
    offline_audit -left- i_audit_gui
    offline_audit -up-> i_audit_out
    offline_audit -right-> i_java

    i_audit_in ..> i_encrypted_votes
    i_audit_in ..> i_mixed_votes
    i_audit_in ..> i_decryption_proof
    i_audit_in ..> i_mixing_proof
    i_audit_in ..> i_voting_result


    i_audit_out ..> i_app_log

}

a_auditor -> i_audit_gui
!endif

/'
 '
 ' SEADISTUSRAKENDUS
 '
 '/

!ifdef CONFIG_APPLICATION
package "TR_P_CONFIG()" as p_config {
    [TR_CONF_APP()] <<TR_IVXV()>> as conf_app

    database "TR_CONF_DB()" as conf_db {
    }

    conf_app -> conf_db

    interface "TR_CONF_IN()" <<TR_IVXV()>> as i_conf_in
    interface "TR_CONF_OUT()" <<TR_IVXV()>> as i_conf_out

    interface "TR_SMTP()" <<TR_IVXV()>> as i_smtp
    interface "TR_CONF_GUI()" <<TR_IVXV()>> as i_conf_gui

    conf_app -up- i_smtp
    conf_app -down- i_conf_in
    conf_app -down- i_conf_out
    conf_app -down- i_conf_gui

    i_conf_out --> i_conf_bundle
    i_conf_out --> i_app_log

    i_conf_in --> i_vis_dist
    i_conf_in --> i_vis_cands
    i_conf_in --> i_pop_voters
}

a_owner --> i_conf_gui
!endif







/'
actor "TR_A_ADMIN()" <<TR_NEC()>> as admin
owner -left-> i_remoteadmin
admin -down-> i_localadmin
admin -down-> i_backup
'/

!ifdef VOTER
actor "TR_A_VOTER()" <<TR_EXTERNAL()>> as voter
interface "TR_VOTE()" <<TR_NEC()>> as i_vote
interface "TR_INDVERIFY()" <<TR_NEC()>> as i_indverify
i_https_ext -up- i_vote
i_https_ext -up- i_indverify
voter -down-> i_vote
voter -down-> i_indverify
!endif


@enduml
