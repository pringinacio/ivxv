@startuml


!ifdef PHASE_1
    !define PHASE_VOTE
    !define PHASE_VOTER
    !define PHASE_COLLECT
    !define PHASE_REG
!endif

!ifdef PHASE_2
    !define PHASE_VERIFY
    !define PHASE_VOTER
    !define PHASE_COLLECT
!endif

!ifdef PHASE_3
    !define PHASE_COLLECT
    !define PHASE_REG
    !define PHASE_PROC
!endif



!ifdef PHASE_VOTER
actor "TR_A_VOTER()" as a_voter
!endif

!ifdef PHASE_VOTE
participant "TR_P_VOTA()" as p_vota
!endif

!ifdef PHASE_VERIFY
participant "TR_P_VERA()" as p_vera
!endif

!ifdef PHASE_COLLECT
box "TR_BOX_COLLECT()"
    participant "TR_P_COLLECT()" as p_collect
end box
!endif

!ifdef PHASE_REG
box "TR_BOX_REG()"
participant "TR_P_REG()" as p_reg
end box
!endif

!ifdef PHASE_PROC
box "TR_BOX_PROCESSOR()"
  participant "TR_P_PROCESSOR()" as p_processor
end box
!endif


!ifdef PHASE_1

== TR_PHASE1() ==

a_voter --> p_vota: ballot_v, key_v

p_vota -> p_collect: vote_v = Sign(key_v, Enc(ballot_v))

p_collect -> p_reg: reg_request_v = Sign(key_k, (v_id, Hash(vote_v)))

p_reg -> p_reg: VerifyAndStore(reg_request_v, cert_k)

p_reg -> p_collect: reg_confirmation_v = Sign(key_r, Hash(reg_request_v))

p_collect -> p_collect: VerifyAndStore(reg_confirmation_v, cert_r)

p_collect -> p_vota: v_id, reg_request_v, reg_confirmation_v

p_vota -> p_vota: Verify(reg_request_v, cert_k)
p_vota -> p_vota: Verify(reg_confirmation_v, cert_r)
p_vota -> p_vota: Verify(reg_confirmation_v, reg_request_v, vote_v)
p_vota --> a_voter: v_id

!endif


!ifdef PHASE_2

== TR_PHASE2() ==

a_voter --> p_vera: v_id

p_vera -> p_collect: v_id

p_collect -> p_vera: vote_v, reg_request_v, reg_confirmation_v

p_vera -> p_vera: Verify(reg_request_v, cert_k)
p_vera -> p_vera: Verify(reg_confirmation_v, cert_r)
p_vera -> p_vera: Verify(reg_confirmation_v, reg_request_v, vote_v)
p_vera --> a_voter: ballot_v

!endif


!ifdef PHASE_3

== TR_PHASE3() ==

p_collect -> p_processor: (v_id, vote_i, reg_request_i, reg_confirmation_i)
p_reg -> p_processor: (v_id, Hash(vote_i), reg_request_i)


== TR_PHASE4() ==

!endif



@enduml
